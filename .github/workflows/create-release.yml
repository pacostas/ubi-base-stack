name: Create Release

on:
  schedule:
    - cron: "*/30 * * * *" # every 30 minutes
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of the release to cut (e.g. 1.2.3). No leading v'
        required: false
      force:
        description: 'Release stack even if change validator does not detect changes, or a package is removed'
        required: true
        type: choice
        default: 'false'
        options:
        - 'true'
        - 'false'

concurrency: release
env:
  STACKS_FILEPATH: "stacks/images.json"
  PATCHED_USNS_FILENAME: "patched-usns.json"

jobs:
  preparation:
    name: Preparation
    runs-on: ubuntu-22.04
    outputs:
      stacks: ${{ steps.get-stacks.outputs.stacks }}
      support_usns: ${{ steps.polling-os-type.outputs.support_usns }}
      architectures: ${{ steps.lookup.outputs.platforms }}
      polling_type: ${{ steps.polling-os-type.outputs.polling_type }}
      github_repo_name: ${{ steps.repo.outputs.github_repo_name }}
      registry_repo_name: ${{ steps.repo.outputs.registry_repo_name }}
      repo_owner: ${{ steps.repo.outputs.repo_owner }}
      default_stack_dir: ${{ steps.lookup.default_stack_dir }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get stacks images
        id: get-stacks
        run: |
          stacks=$(
            cat <<EOF
          [
            {
              "name": "default",
              "config_dir": "stack",
              "output_dir": "build",
              "build_image": "build",
              "build_receipt_filename": "build-receipt.cyclonedx.json",
              "run_image": "run",
              "run_receipt_filename": "run-receipt.cyclonedx.json",
              "create_build_image": true
            }
          ]
          EOF
          )

          if [[ -f ${{ env.STACKS_FILEPATH }} ]]; then
            stacks=$(jq '[.images[] |
            . +
            {
              "create_build_image": (.create_build_image // false)
            }]' ${{ env.STACKS_FILEPATH }} )
          fi

          ## Filtering stacks array to include the minimum number of attributes
          stacks=$(echo "$stacks" | jq 'map({ 
              name,
              config_dir,
              output_dir,
              build_image,
              build_receipt_filename,
              run_image,
              run_receipt_filename,
              create_build_image,
              base_build_container_image,
              base_run_container_image
            })')

          stacks=$(jq -c <<< "$stacks" )
          printf "stacks=%s\n" "${stacks}" >> "$GITHUB_OUTPUT"

      ## TODO below code can be improved by searching the os type from the stack
      ## description
      - name: Polling OS type
        id: polling-os-type
        run: |
          support_usns=true

          if [[ -f ${{ env.STACKS_FILEPATH }} ]]; then
            support_usns=$( jq '.support_usns' ${{ env.STACKS_FILEPATH }} )
          fi

          if [ $support_usns == true ]; then
            echo "polling_type=usn" >> "$GITHUB_OUTPUT"
          else
            echo "polling_type=hash" >> "$GITHUB_OUTPUT"
          fi

          echo "support_usns=${support_usns}" >> "$GITHUB_OUTPUT"

      - name: Get Repository Name
        id: repo
        run: |
          full=${{ github.repository }}
          # Strip off the org and slash from repo name
          # paketo-buildpacks/jammy-base-stack --> jammy-base-stack
          repo=$(echo "${full}" | sed 's/^.*\///')
          echo "github_repo_name=${repo}" >> "$GITHUB_OUTPUT"

          # Strip off 'stack' suffix from repo name
          # paketo-buildpacks/jammy-base-stack --> jammy-base
          registry_repo="${repo//-stack/}"
          echo "registry_repo_name=${registry_repo}" >> "$GITHUB_OUTPUT"

          # translates 'paketo-buildpacks' to 'paketobuildpacks'
          repo_owner="${GITHUB_REPOSITORY_OWNER/-/}"
          printf "repo_owner=%s\n" "${repo_owner}" >> "$GITHUB_OUTPUT"

      - name: Lookup Supported Architectures
        id: lookup
        run: |
          #! /usr/bin/env bash

          set -euo pipefail
          shopt -s inherit_errexit

          #install yj to parse TOML
          curl -L $(curl -sL https://api.github.com/repos/sclevine/yj/releases/latest |  jq -r '.assets[] | select(.name=="yj-linux-amd64").browser_download_url') -o yj
          chmod +x yj

          default_stack_dir=$(echo '${{ steps.get-stacks.outputs.stacks }}' | jq -r '.[] | select(.name=="default") | .config_dir')

          platforms="$(cat "$default_stack_dir/stack.toml" | ./yj -tj | jq -c '[.platforms[] | sub("linux/"; "")]')"

          echo "default_stack_dir=${default_stack_dir}"
          echo "platforms=${platforms}" >> "$GITHUB_OUTPUT"

  # The following job is specific to Ubuntu images. It checks for new
  # USNs (Ubuntu Security Notices) and triggers the flow to create
  # a new release with the latest images that have the USNs patched.
  poll_usns:
    name: Poll USNs
    runs-on: ubuntu-22.04
    needs: [preparation]
    if: ${{ needs.preparation.outputs.polling_type == 'usn' }}
    strategy:
      matrix:
        stacks: ${{ fromJSON(needs.preparation.outputs.stacks) }}
        arch: ${{ fromJSON(needs.preparation.outputs.architectures) }}
    outputs:
      usns: ${{ steps.new_usns.outputs.usns }}
    steps:
    - name: Generate receipt asset patterns
      id: receipt_pattern
      run: |
        if [ "${{ matrix.arch }}" = "amd64" ]; then
          if [ ${{ matrix.stacks.create_build_image }} == true ]; then
            echo "build=${{ needs.preparation.outputs.github_repo_name }}-\\d+\\.\\d+(\\.\\d+)?-${{ matrix.stacks.build_receipt_filename }}" >> "$GITHUB_OUTPUT"
          fi
          echo "run=${{ needs.preparation.outputs.github_repo_name }}-\\d+\\.\\d+(\\.\\d+)?-${{ matrix.stacks.run_receipt_filename }}" >> "$GITHUB_OUTPUT"
        else
          if [ ${{ matrix.stacks.create_build_image }} == true ]; then
            echo "build=${{ matrix.arch }}-${{ matrix.stacks.build_receipt_filename }}" >> "$GITHUB_OUTPUT"
          fi
          echo "run=${{ matrix.arch }}-${{ matrix.stacks.run_receipt_filename }}" >> "$GITHUB_OUTPUT"
        fi

    - name: Find and Download Previous Build Receipt
      id: previous_build
      uses: paketo-buildpacks/github-config/actions/release/find-and-download-asset@main
      with:
        asset_pattern: "${{ steps.receipt_pattern.outputs.build }}"
        search_depth: 1
        repo: ${{ github.repository }}
        output_path: "/github/workspace/${{ matrix.arch }}-previous-build-receipt-${{ matrix.stacks.name }}"
        token: ${{ secrets.PAKETO_BOT_GITHUB_TOKEN }}

    - name: Find and Download Previous Run Receipt
      id: previous_run
      uses: paketo-buildpacks/github-config/actions/release/find-and-download-asset@main
      with:
        asset_pattern: "${{ steps.receipt_pattern.outputs.run }}"
        search_depth: 1
        repo: ${{ github.repository }}
        output_path: "/github/workspace/${{ matrix.arch }}-previous-run-receipt-${{ matrix.stacks.name }}"
        token: ${{ secrets.PAKETO_BOT_GITHUB_TOKEN }}

    - name: Get Package List
      id: packages
      if: ${{ steps.previous_build.outputs.output_path != '' && steps.previous_run.outputs.output_path != '' }}
      uses: paketo-buildpacks/github-config/actions/stack/generate-package-list@main
      with:
        build_receipt: "/github/workspace/${{ matrix.arch }}-previous-build-receipt-${{ matrix.stacks.name }}"
        run_receipt: /github/workspace/${{ matrix.arch }}-previous-run-receipt-${{ matrix.stacks.name }}"

    - name: Generate USNs download asset pattern
      id: usn_download_pattern
      run: |
        arch_prefix=""
        if [ "${{ matrix.arch }}" = "amd64" ]; then
          arch_prefix=""
        else
          arch_prefix="${{ matrix.arch }}"
        fi

        stack_name_prefix=""
        if [ "${{ matrix.stacks.name }}" = "default" ]; then
          stack_name_prefix=""
        else
          stack_name_prefix="${{ matrix.stacks.name }}"
        fi

        pattern=$(echo '["\\\\d+.\\\\d+(.\\\\d+)?","'"$stack_name_prefix"'", "'"$arch_prefix"'", "${{ env.PATCHED_USNS_FILENAME }}"]' |  jq -r 'map(select(length > 0)) | join("-")')

        echo "pattern=$pattern" >> "$GITHUB_OUTPUT"

    - name: Find and Download Previous Patched USNs
      id: download_patched
      uses: paketo-buildpacks/github-config/actions/release/find-and-download-asset@main
      with:
        asset_pattern: "${{ steps.usn_download_pattern.outputs.pattern }}"
        search_depth: "-1"   # Search all releases
        repo: ${{ github.repository }}
        output_path: "/github/workspace/${{ matrix.arch }}-${{ matrix.stacks.name }}-${{ env.PATCHED_USNS_FILENAME }}-previous"
        token: ${{ secrets.PAKETO_BOT_GITHUB_TOKEN }}

    - name: Output Patched USNs as JSON String
      id: patched
      if: ${{ steps.download_patched.outputs.output_path != '' }}
      run: |
        patched=$(jq --compact-output . < "${GITHUB_WORKSPACE}/${{ matrix.arch }}-${{ matrix.stacks.name }}-${{ env.PATCHED_USNS_FILENAME }}-previous")
        printf "patched=%s\n" "${patched}" >> "$GITHUB_OUTPUT"

    - name: Get Stack Distribution Name
      id: distro
      run: |
        # Extract distro from repo name:
        # paketo-buildpacks/jammy-tiny-stack --> jammy
        distro="$(echo "${{ github.repository }}" | sed 's/^.*\///' | sed 's/\-.*$//')"
        echo "Ubuntu distribution: ${distro}"
        printf "distro=%s\n" "${distro}" >> "$GITHUB_OUTPUT"

    - name: Get New USNs
      uses: paketo-buildpacks/github-config/actions/stack/get-usns@main
      id: usns
      with:
        distribution: ${{ steps.distro.outputs.distro }}
        packages: ${{ steps.packages.outputs.packages }}
        last_usns: ${{ steps.patched.outputs.patched }}

    - name: Write USNs File
      id: write_usns
      run: |
        jq . <<< "${USNS}" > "${USNS_PATH}"
        echo "usns=${USNS_PATH}" >> "$GITHUB_OUTPUT"
      env:
        USNS_PATH: "${{ matrix.arch }}-${{ matrix.stacks.name }}-${{ env.PATCHED_USNS_FILENAME }}"
        USNS: ${{ steps.usns.outputs.usns }}

    - name: Upload USNs file
      uses: actions/upload-artifact@v4
      with:
        name: "${{ matrix.arch }}-${{ matrix.stacks.name }}-${{ env.PATCHED_USNS_FILENAME }}"
        path: "${{ matrix.arch }}-${{ matrix.stacks.name }}-${{ env.PATCHED_USNS_FILENAME }}"

    - name: Are any new USNs
      id: new_usns
      run: |
        if [ "${{ steps.usns.outputs.usns }}" != "[]"  ]; then
          echo "usns=true" >> "$GITHUB_OUTPUT"
        fi

  # The job below checks if new images are available on the registry
  # based on the sha256 checksum. If yes, it triggers the flow
  # to create a new release with the latest images
  poll_images:
    name: Poll Images based on the hash code
    runs-on: ubuntu-22.04
    if: ${{ needs.preparation.outputs.polling_type == 'hash' }}
    needs: preparation
    strategy:
      matrix:
        stacks: ${{ fromJSON(needs.preparation.outputs.stacks) }}
        arch: ${{ fromJSON(needs.preparation.outputs.architectures) }}
    outputs:
      images_need_update: ${{ steps.compare_previous_and_current_sha256_hash_codes.outputs.images_need_update }}
    steps:
    - name: Generate hash code asset patterns
      id: hashcode_pattern
      run: |
        if [ "${{ matrix.arch }}" = "amd64" ]; then
          echo "build=${{ needs.preparation.outputs.github_repo_name }}-\\d+.\\d+(.\\d+)?-${{ matrix.stacks.build_image }}.oci.sha256" >> "$GITHUB_OUTPUT"
          echo "run=${{ needs.preparation.outputs.github_repo_name }}-\\d+.\\d+(.\\d+)?-${{ matrix.stacks.run_image }}.oci.sha256" >> "$GITHUB_OUTPUT"
        else
          echo "build=-${{ matrix.arch }}-${{ matrix.stacks.build_image }}.oci.sha256" >> "$GITHUB_OUTPUT"
          echo "run=-${{ matrix.arch }}-${{ matrix.stacks.run_image }}.oci.sha256" >> "$GITHUB_OUTPUT"
        fi        

    - name: Find and Download Previous build image hash code of stack ${{ matrix.stacks.build_image }}
      if: ${{ matrix.stacks.create_build_image == true }}
      uses: paketo-buildpacks/github-config/actions/release/find-and-download-asset@main
      with:
        asset_pattern: "${{ steps.hashcode_pattern.outputs.build }}"
        search_depth: 1
        repo: ${{ github.repository }}
        output_path: "./previous_${{ matrix.arch }}-${{ matrix.stacks.build_image }}.oci.sha256"
        token: ${{ secrets.PAKETO_BOT_GITHUB_TOKEN }}
        strict: true

    - name: Find and Download Previous run image hash code of stack ${{ matrix.stacks.run_image }}
      uses: paketo-buildpacks/github-config/actions/release/find-and-download-asset@main
      with:
        asset_pattern: "${{ steps.hashcode_pattern.outputs.run }}"
        search_depth: 1
        repo: ${{ github.repository }}
        output_path: "./previous_${{ matrix.arch }}-${{ matrix.stacks.run_image }}.oci.sha256"
        token: ${{ secrets.PAKETO_BOT_GITHUB_TOKEN }}
        strict: true

    - name: Get current build image hash code of ${{ matrix.stacks.name }} stack with arch ${{ matrix.arch }}
      if: ${{ matrix.stacks.create_build_image == true }}
      run: |
        skopeo inspect --format "{{.Digest}}" ${{ matrix.stacks.base_build_container_image }} > ./hash-code-current-build-image-${{ matrix.arch }}-${{ matrix.stacks.name }}

    - name: Get current run image hash code of ${{ matrix.stacks.name }} stack with arch ${{ matrix.arch }}
      run: |
        skopeo inspect --format "{{.Digest}}" ${{ matrix.stacks.base_run_container_image }} > ./hash-code-current-run-image-${{ matrix.arch }}-${{ matrix.stacks.name }}

    - name: Upload run image hash code
      uses: actions/upload-artifact@v4
      with:
        name: hash-code-current-run-image-${{ matrix.arch }}-${{ matrix.stacks.name }}
        path: hash-code-current-run-image-${{ matrix.arch }}-${{ matrix.stacks.name }}
        if-no-files-found: error 

    - name: Upload build image hash code
      if: ${{ matrix.stacks.create_build_image == true }}
      uses: actions/upload-artifact@v4
      with:
        name: hash-code-current-build-image-${{ matrix.arch }}-${{ matrix.stacks.name }}
        path: hash-code-current-build-image-${{ matrix.arch }}-${{ matrix.stacks.name }}
        if-no-files-found: error

    - name: Compare previous and current hash codes
      id: compare_previous_and_current_sha256_hash_codes
      run: |
        if [ "$(cat previous_${{ matrix.arch }}-${{ matrix.stacks.run_image }}.oci.sha256)" != "$(cat hash-code-current-run-image-${{ matrix.arch }}-${{ matrix.stacks.name }})" ]; then
          echo "images_need_update=true" >> "$GITHUB_OUTPUT"
        fi

        if [ "${{ matrix.stacks.create_build_image }}" == "true" ]; then

          if [ "$(cat previous_${{ matrix.arch }}-${{ matrix.stacks.build_image }}.oci.sha256)" != "$(cat hash-code-current-build-image-${{ matrix.arch }}-${{ matrix.stacks.name }})" ]; then
            echo "images_need_update=true" >> "$GITHUB_OUTPUT"
          fi
        fi

  # If there is no change on the usns, and there is no change on the image hash codes
  # and the event is schedule, then there is no need to run below workflow as nothing has changed
  stack_files_changed:
    name: Determine If Stack Files Changed
    runs-on: ubuntu-22.04
    needs: [ preparation, poll_usns, poll_images  ]
    if: ${{ 
      !failure() && !cancelled() &&
      !(
        (needs.poll_images.outputs.images_need_update == null && 
        needs.poll_usns.outputs.usns == null ) && 
        github.event_name == 'schedule'
      ) }}
    outputs:
      stack_files_changed: ${{ steps.compare.outputs.stack_files_changed }}
    steps:
    - name: Checkout With History
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # gets full history

    - name: Compare With Previous Release
      id: compare
      run: |

        # shellcheck disable=SC2046
        changed="$(git diff --name-only $(git describe --tags --abbrev=0) -- ${{ needs.preparation.outputs.default_stack_dir }})"
        if [ -n "${changed}" ]
        then
          echo "Relevant files have changed since previous release."
          echo "${changed}"
          echo "stack_files_changed=true" >> "$GITHUB_OUTPUT"
        fi

  run_if_stack_files_changed:
    name: Run If Stack Files Changed
    runs-on: ubuntu-22.04
    needs: [stack_files_changed]
    if: ${{ needs.stack_files_changed.outputs.stack_files_changed == 'true' }}
    steps:
    - name: Run if stack files changed
      run: |
        echo "stack files have changed"

  create_stack:
    name: Create Stack
    needs: [ preparation, poll_usns, poll_images ]
    # If there is no change on the usns, and there is no change on the image hash codes
    # and the event is schedule, then there is no need to run below workflow as nothing has changed
    if: ${{
      !failure() && !cancelled() &&
      !(
        (needs.poll_images.outputs.images_need_update == null && 
        needs.poll_usns.outputs.usns == null ) && 
        github.event_name == 'schedule'
      ) }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        stacks: ${{ fromJSON(needs.preparation.outputs.stacks) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Create stack ${{ matrix.stacks.name }}
        id: create-stack
        run: |
          scripts/create.sh --stack-dir ${{ matrix.stacks.config_dir }} \
                            --build-dir ${{ matrix.stacks.output_dir }}

      - name: Upload build image
        if: ${{ matrix.stacks.create_build_image == true }}
        uses: actions/upload-artifact@v4
        with:
          name: current-build-image-${{ matrix.stacks.name }}
          path: "${{ matrix.stacks.output_dir }}/build.oci"
          if-no-files-found: error

      - name: Upload run image
        uses: actions/upload-artifact@v4
        with:
          name: current-run-image-${{ matrix.stacks.name }}
          path: "${{ matrix.stacks.output_dir }}/run.oci"
          if-no-files-found: error

      - name: Generate Package Receipts
        id: receipts
        run: |
          scripts/receipts.sh --build-image "${{ matrix.stacks.output_dir }}/build.oci" \
                              --run-image "${{ matrix.stacks.output_dir }}/run.oci" \
                              --build-receipt current-build-receipt-${{ matrix.stacks.name }} \
                              --run-receipt current-run-receipt-${{ matrix.stacks.name }}

      - name: Upload Build receipt
        if: ${{ matrix.stacks.create_build_image == true }}
        uses: actions/upload-artifact@v4
        with:
          name: current-build-receipt-${{ matrix.stacks.name }}
          path: "*current-build-receipt-${{ matrix.stacks.name }}"
          if-no-files-found: error 

      - name: Upload Run receipt
        uses: actions/upload-artifact@v4
        with:
          name: current-run-receipt-${{ matrix.stacks.name }}
          path: "*current-run-receipt-${{ matrix.stacks.name }}"
          if-no-files-found: error 

  diff:
    name: Diff Packages
    needs: [ preparation, create_stack , poll_images]
    if: ${{ !cancelled() && !failure() }}
    runs-on: ubuntu-22.04
    outputs:
      removed_with_force: ${{ steps.removed_with_force.outputs.packages_removed }}
    strategy:
      matrix:
        stacks: ${{ fromJSON(needs.preparation.outputs.stacks) }}
        arch: ${{ fromJSON(needs.preparation.outputs.architectures) }}
    steps:
    - name: Current receipt filenames
      id: current_receipt
      run: |
        if [ "${{ matrix.arch }}" = "amd64" ]; then
          echo "build_filename=current-build-receipt-${{ matrix.stacks.name }}" >>  "$GITHUB_OUTPUT"
          echo "run_filename=current-run-receipt-${{ matrix.stacks.name }}" >>  "$GITHUB_OUTPUT"
        else
          echo "build_filename=${{ matrix.arch }}-current-build-receipt-${{ matrix.stacks.name }}" >>  "$GITHUB_OUTPUT"
          echo "run_filename=${{ matrix.arch }}-current-run-receipt-${{ matrix.stacks.name }}" >>  "$GITHUB_OUTPUT"
        fi

    - name: Download Current Build Receipt(s)
      if: ${{ matrix.stacks.create_build_image == true }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ steps.current_receipt.outputs.build_filename }}

    - name: Download Current Run Receipt(s)
      uses: actions/download-artifact@v4
      with:
        name: ${{ steps.current_receipt.outputs.run_filename }}

    - name: Display structure of downloaded files
      run: ls -R

    - name: Check for Previous Releases
      id: check_previous
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh auth status
        # shellcheck disable=SC2046
        if [ $(gh api "/repos/${{ github.repository }}/releases" | jq -r 'length') -eq 0 ]; then
          echo "exists=false" >> "$GITHUB_OUTPUT"
          exit 0
        fi
        echo "exists=true" >> "$GITHUB_OUTPUT"

    - name: Write Empty Previous Receipts
      if: ${{ steps.check_previous.outputs.exists == 'false' }}
      run: |
        if [ ${{ matrix.stacks.create_build_image }} == true ]; then
          echo '{"components":[]}' > "/github/workspace/${{ matrix.arch }}-previous-build-receipt-${{ matrix.stacks.name }}"
        fi
        echo '{"components":[]}' > "/github/workspace/${{ matrix.arch }}-previous-run-receipt-${{ matrix.stacks.name }}"

    - name: Previous receipt download filename pattern
      id: previous_receipt_download_pattern
      run: |
        if [ "${{ matrix.arch }}" = "amd64" ]; then
          if [ ${{ matrix.stacks.create_build_image }} == true ]; then
            echo "build_filename=${{ needs.preparation.outputs.github_repo_name }}-\\d+\\.\\d+(\\.\\d+)?-${{ matrix.stacks.build_receipt_filename }}" >> "$GITHUB_OUTPUT"
          fi
          echo "run_filename=${{ needs.preparation.outputs.github_repo_name }}-\\d+\\.\\d+(\\.\\d+)?-${{ matrix.stacks.run_receipt_filename }}" >> "$GITHUB_OUTPUT"
        else
          if [ ${{ matrix.stacks.create_build_image }} == true ]; then
            echo "build_filename=${{ matrix.arch }}-${{ matrix.stacks.build_receipt_filename }}" >> "$GITHUB_OUTPUT"
          fi
          echo "run_filename=${{ matrix.arch }}-${{ matrix.stacks.run_receipt_filename }}" >> "$GITHUB_OUTPUT"
        fi

    - name: Find and Download Previous Build Receipt
      if: ${{ matrix.stacks.create_build_image == true && steps.check_previous.outputs.exists == 'true' }}
      uses: paketo-buildpacks/github-config/actions/release/find-and-download-asset@main
      with:
        asset_pattern: "${{ steps.previous_receipt_download_pattern.outputs.build }}"
        search_depth: 1
        repo: ${{ github.repository }}
        output_path: "/github/workspace/${{ matrix.arch }}-previous-build-receipt-${{ matrix.stacks.name }}"
        token: ${{ secrets.PAKETO_BOT_GITHUB_TOKEN }}

    - name: Find and Download Previous Run Receipt
      if: ${{ steps.check_previous.outputs.exists == 'true' }}
      uses: paketo-buildpacks/github-config/actions/release/find-and-download-asset@main
      with:
        asset_pattern: "${{ steps.previous_receipt_download_pattern.outputs.run_filename }}"
        search_depth: 1
        repo: ${{ github.repository }}
        output_path: "/github/workspace/${{ matrix.arch }}-previous-run-receipt-${{ matrix.stacks.name }}"
        token: ${{ secrets.PAKETO_BOT_GITHUB_TOKEN }}

    - name: Compare Build Packages
      id: build_diff
      if: ${{ matrix.stacks.create_build_image == true }}
      uses: paketo-buildpacks/github-config/actions/stack/diff-package-receipts@main
      with:
        previous: "/github/workspace/${{ matrix.arch }}-previous-build-receipt-${{ matrix.stacks.name }}"
        current: "/github/workspace/${{ steps.current_receipt.outputs.build_filename}}"

    - name: Compare Run Packages
      id: run_diff
      uses: paketo-buildpacks/github-config/actions/stack/diff-package-receipts@main
      with:
        previous: "/github/workspace/${{ matrix.arch }}-previous-run-receipt-${{ matrix.stacks.name }}"
        current: "/github/workspace/${{ steps.current_receipt.outputs.run_filename}}"

    - name: Fail If Packages Removed
      id: removed_with_force
      run: |
         if [ "${{ matrix.stacks.create_build_image }}" == "true" ]; then
          build=$(jq '. | length' <<< "${BUILD_REMOVED}")
           echo "Build (${{ matrix.arch }}) packages removed: ${build}"
         fi

         run=$(jq '. | length' <<< "${RUN_REMOVED}")
         echo "Run (${{ matrix.arch }}) packages removed: ${run}"

         # only fail if packages are removed AND the release has not been forced
         if ([ "${build}" -gt 0 ] && [ "${{ matrix.stacks.create_build_image }}" == "true"  ]) || [ "${run}" -gt 0 ]; then
           if [ "${{ github.event.inputs.force }}" != 'true' ]; then
             echo "Packages removed without authorization. Stack cannot be released."
             exit 1
           else
             echo "packages removed with user-provided force"
             echo "packages_removed=true" >> "$GITHUB_OUTPUT"
           fi
         else
           echo "packages_removed=false" >> "$GITHUB_OUTPUT"
         fi
      env:
        BUILD_REMOVED: ${{ steps.build_diff.outputs.removed }}
        RUN_REMOVED: ${{ steps.run_diff.outputs.removed }}

    - name: Create/Upload variable artifacts
      id: variable_artifacts
      run: |
        mkdir -p diff-${{ matrix.arch }}-${{ matrix.stacks.name }}
        cd diff-${{ matrix.arch }}-${{ matrix.stacks.name }}

        if [ "${{ matrix.stacks.create_build_image }}" == "true" ]; then
         echo '${{ steps.build_diff.outputs.added }}' > build_added
         echo '${{ steps.build_diff.outputs.modified }}' > build_modified
         echo '${{ steps.build_diff.outputs.removed }}' > build_removed_with_force
        fi

        echo '${{ steps.run_diff.outputs.added }}' > run_added
        echo '${{ steps.run_diff.outputs.modified }}' > run_modified
        echo '${{ steps.run_diff.outputs.removed }}' > run_removed_with_force

    - name: Upload diff-${{ matrix.arch }}-${{ matrix.stacks.name }}
      uses: actions/upload-artifact@v4
      with:
        name: diff-${{ matrix.arch }}-${{ matrix.stacks.name }}
        path: diff-${{ matrix.arch }}-${{ matrix.stacks.name }}
        if-no-files-found: error 

    - name: Download USN File(s)
      if: ${{ needs.preparation.outputs.polling_type == 'usn' }}
      uses: actions/download-artifact@v4
      with:
        pattern: "${{ matrix.arch }}-${{ matrix.stacks.name }}-${{ env.PATCHED_USNS_FILENAME }}"
        path: "${{ matrix.arch }}-${{ matrix.stacks.name }}-${{ env.PATCHED_USNS_FILENAME }}"

    # TODO debug code Remove
    - name: Tree
      run: tree .
    
    - name: Get USNs
      id: get-usns
      run: |
        usns=$(cat "${{ matrix.arch }}-${{ matrix.stacks.name }}-${{ env.PATCHED_USNS_FILENAME }}" )
        echo "usns=$usns" >> "$GITHUB_OUTPUT"

    - name: Get Repository Name
      id: repo_name
      run: |
        full=${{ github.repository }}
        # Strip off the org and slash from repo name
        # paketo-buildpacks/repo-name --> repo-name
        repo=$(echo "${full}" | sed 's/^.*\///')
        echo "github_repo_name=${repo}" >> "$GITHUB_OUTPUT"

        # Strip off 'stack' suffix from repo name
        # some-name-stack --> some-name
        registry_repo="${repo//-stack/}"
        echo "registry_repo_name=${registry_repo}" >> "$GITHUB_OUTPUT"

    - name: Set Release Tag
      id: tag
      run: |
        tag="${{ github.event.inputs.version }}"
        if [ -z "${tag}" ]; then
          tag="${{ steps.semver.outputs.tag }}"
        fi
        echo "tag=${tag}" >> "$GITHUB_OUTPUT"

    - name: Get registry build and run image names
      id: registry_names
      run: |
        if [ "${{ matrix.stacks.create_build_image }}" == "true" ]; then
          echo "build_image=${{ needs.preparation.outputs.repo_owner }}/${{ matrix.stacks.build_image }}-${{ needs.preparation.outputs.registry_repo_name }}:${{ steps.tag.outputs.tag }}" >> "$GITHUB_OUTPUT"
        else
          echo "build_image=" >> "$GITHUB_OUTPUT"
        fi

        echo "run_image=${{ needs.preparation.outputs.repo_owner }}/${{ matrix.stacks.run_image }}-${{ needs.preparation.outputs.registry_repo_name }}:${{ steps.tag.outputs.tag }}" >> "$GITHUB_OUTPUT"

    - name: Create Release Notes
      id: notes
      uses: paketo-buildpacks/github-config/actions/stack/release-notes@main
      with:
        build_image: ${{ steps.registry_names.outputs.build_image }}
        run_image: ${{ steps.registry_names.outputs.run_image }}
        build_packages_added: ${{ steps.build_diff.outputs.added }}
        build_packages_modified: ${{ steps.build_diff.outputs.modified }}
        build_packages_removed_with_force: ${{ steps.build_diff.outputs.removed }}
        run_packages_added: ${{ steps.run_diff.outputs.added }}
        run_packages_modified: ${{ steps.run_diff.outputs.modified }}
        run_packages_removed_with_force: ${{ steps.run_diff.outputs.removed }}
        supports_usns: ${{ needs.preparation.outputs.support_usns }}
        patched_usns: ${{ needs.get-usns.outputs.usns }}

    - name: Release Notes File
      id: release-notes-file
      run: |
        printf '%s\n' '${{ steps.notes.outputs.release_body }}' > "${{ matrix.arch }}-${{ matrix.stacks.name }}-release-notes.md"

    - name: Upload ${{ matrix.arch }} release notes file for stack ${{ matrix.stacks.name }}
      uses: actions/upload-artifact@v4
      with:
        name: "${{ matrix.arch }}-${{ matrix.stacks.name }}-release-notes.md"
        path: "${{ matrix.arch }}-${{ matrix.stacks.name }}-release-notes.md"

  run_if_packages_removed_with_force:
    name: Run If Packages Removed With Force
    needs: [ diff ]
    runs-on: ubuntu-22.04
    if: ${{ needs.diff.outputs.removed_with_force == 'true' }}
    steps:
    - name: Run if packages removed with force
      run: |
        echo "packages removed with user-provided force"

  packages_changed:
    name: Determine If Packages Changed
    needs: [ diff, preparation ]
    runs-on: ubuntu-22.04
    if: ${{ !cancelled() && !failure() }}
    strategy:
      matrix:
        stacks: ${{ fromJSON(needs.preparation.outputs.stacks) }}
        arch: ${{ fromJSON(needs.preparation.outputs.architectures) }}
    outputs:
      packages_changed: ${{ steps.compare.outputs.packages_changed }}
    steps:
    - name: Download diff-${{ matrix.arch }}-${{ matrix.stacks.name }}
      uses: actions/download-artifact@v4
      with:
       name: diff-${{ matrix.arch }}-${{ matrix.stacks.name }}

    - name: Compare With Previous Release
      id: compare
      run: |

        if [ "${{ matrix.stacks.create_build_image }}" == "true" ]; then
          # shellcheck disable=SC2153
          build_added=$(cat ./build_added | jq 'length')
          echo "Build packages added: ${build_added}"

          # shellcheck disable=SC2153
          build_modified=$(cat ./build_modified | jq 'length')
          echo "Build packages modified: ${build_modified}"
        fi

        # shellcheck disable=SC2153
        run_added=$(cat ./run_added | jq 'length')
        echo "Run packages added: ${run_added}"

        # shellcheck disable=SC2153
        run_modified=$(cat ./run_modified | jq 'length')
        echo "Run packages modified: ${run_modified}"

        if [ "${run_added}" -eq 0 ] && [ "${run_modified}" -eq 0 ]; then
          echo "No packages changed."
          # we dont set the "packages_changed" to false, as is already null
          # and also due to parallelization, it will override any true value
        else
          echo "packages_changed=true" >> "$GITHUB_OUTPUT"
        fi

        if [ "${{ matrix.stacks.create_build_image }}" == "true" ]; then
          if [ "${build_added}" -eq 0 ] && [ "${build_modified}" -eq 0 ]; then
            echo "No packages changed."
            # we dont set the "packages_changed" to false, as is already null
            # and also due to parallelization, it will override the value
          else
            echo "packages_changed=true" >> "$GITHUB_OUTPUT"
          fi
        fi

  run_if_packages_changed:
    name: Run If Packages Changed
    runs-on: ubuntu-22.04
    needs: [packages_changed]
    if: ${{ !cancelled() && needs.packages_changed.outputs.packages_changed == 'true' }}
    steps:
    - name: Run if packages changed
      run: |
        echo "packages have changed"

  test:
    name: Acceptance Test
    needs: [ create_stack, preparation ]
    runs-on: ubuntu-22.04
    if: ${{ !failure() && !cancelled() }}
    steps:
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'

    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Build image(s)
      uses: actions/download-artifact@v4
      with:
        pattern: current-build-image-*

    - name: Download Run image(s)
      uses: actions/download-artifact@v4
      with:
        pattern: current-run-image-*

    ## TODO remove below debug step
    - name: treeeee
      run: tree .

    - name: Create OCI artifacts destination directory
      run: |
        echo '${{ needs.preparation.outputs.stacks }}' | jq -c '.[]' | while read -r stack; do
          name=$(echo "$stack" | jq -r '.name')
          output_dir=$(echo "$stack" | jq -r '.output_dir')
          create_build_image=$(echo "$stack" | jq -r '.create_build_image')
          mkdir -p $output_dir
          mv "current-run-image-${name}/run.oci" "${output_dir}/run.oci"
          if [ $create_build_image == 'true' ]; then
            mv "current-build-image-${name}/build.oci" "${output_dir}/build.oci"
          fi
        done

    ## TODO remove below debug step
    - name: treeeee
      run: tree .
    
    ## TODO remove below debug step
    - name: ls directory
      run: ls -R ./builds

    # - name: Run Acceptance Tests
    #   run: ./scripts/test.sh --validate-stack-builds

  force_release_creation:
    name: Force Release Creation
    runs-on: ubuntu-22.04
    if: ${{github.event.inputs.force == 'true'}}
    steps:
    - name: Signal force release creation
      run: |
        echo "Force release creation input set to true"

  release:
    name: Release
    runs-on: ubuntu-22.04
    needs: [create_stack, diff, run_if_stack_files_changed, run_if_packages_changed, run_if_packages_removed_with_force, test, force_release_creation, preparation ]
    if: ${{ always() && needs.diff.result == 'success' && needs.test.result == 'success' && (needs.run_if_packages_changed.result == 'success' || needs.run_if_stack_files_changed.result == 'success' || needs.force_release_creation.result == 'success' ) }}
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
    - name: Print Release Reasoning
      run: |
        printf "Diff Packages: %s\n" "${{ needs.diff.result }}"
        printf "Acceptance Tests: %s\n" "${{ needs.test.result }}"
        printf "Run If Packages Changed: %s\n" "${{ needs.run_if_packages_changed.result }}"
        printf "Run If Packages Removed With Force: %s\n" "${{ needs.run_if_packages_removed_with_force.result }}"
        printf "Run If Stack Files Changed: %s\n" "${{ needs.run_if_stack_files_changed.result }}"
        printf "Force Release: %s\n" "${{ github.event.inputs.force }}"

    - name: Checkout With History
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # gets full history

    - name: Download Build image(s)
      uses: actions/download-artifact@v4
      with:
        path: image-files
        pattern: current-build-image-*

    - name: Download Run image(s)
      uses: actions/download-artifact@v4
      with:
        path: image-files
        pattern: current-run-image-*

    - name: Display Build and Run Images
      run: ls image-files

    - name: Download Release Note File(s)
      uses: actions/download-artifact@v4
      with:
        path: release-notes
        pattern: "*release-notes.md"
        merge-multiple: true

    - name: Display Release Note Files
      run: ls release-notes

    - name: Download Build Receipts
      uses: actions/download-artifact@v4
      with:
        path: receipt-files
        pattern: current-build-receipt-*
        merge-multiple: true

    - name: Display Build Receipts
      run: ls receipt-files

    - name: Download Run Receipts
      uses: actions/download-artifact@v4
      with:
        path: receipt-files
        pattern: current-run-receipt-*
        merge-multiple: true

    - name: Display Run Receipts
      run: ls receipt-files

    - name: Download hash code Files
      if: ${{ needs.preparation.outputs.polling_type == 'hash' }}
      uses: actions/download-artifact@v4
      with:
        path: hash-code-files
        pattern: hash-code-*
        merge-multiple: true

    - name: Display hash code Files
      if: ${{ needs.preparation.outputs.polling_type == 'hash' }}
      run: ls hash-code-files

    - name: Download USN Files
      if: ${{ needs.preparation.outputs.polling_type == 'usn' }}
      uses: actions/download-artifact@v4
      with:
        path: usn-files
        pattern: "*${{ env.PATCHED_USNS_FILENAME }}"
        merge-multiple: true

    - name: Display USN Files
      if: ${{ needs.preparation.outputs.polling_type == 'usn' }}
      run: ls usn-files

    #TODO remove below debug code
    - name: tree
      run: tree .

    - name: Increment Tag
      if: github.event.inputs.version == ''
      id: semver
      uses: paketo-buildpacks/github-config/actions/tag/increment-tag@main
      with:
        allow_head_tagged: true

    - name: Set Release Tag
      id: tag
      run: |
        tag="${{ github.event.inputs.version }}"
        if [ -z "${tag}" ]; then
          tag="${{ steps.semver.outputs.tag }}"
        fi
        echo "tag=${tag}" >> "$GITHUB_OUTPUT"

    - name: Setup Release Assets
      id: assets
      run: |

        stacks=$(echo '${{ needs.preparation.outputs.stacks }}' | jq -c '.[]')
        archs=$(echo '${{ needs.preparation.outputs.architectures }}' | jq -c -r '.[]')

        # Start with an empty array
        assets=$(jq -n -c '[]')

        for stack in $stacks; do
          stack_name=$(echo "$stack" | jq -r '.name')
          run_image=$(echo "$stack" | jq -r '.run_image')
          create_build_image=$(echo "$stack" | jq -r '.create_build_image // false')
          run_receipt_filename=$(echo "$stack" | jq -r '.run_receipt_filename')

          assets="$(jq --compact-output \
            --arg image_filepath "image-files" \
            --arg stack_name "${stack_name}" \
            --arg run_image "${run_image}" \
            --arg tag "${{ steps.tag.outputs.tag }}" \
            --arg repo "${{ needs.preparation.outputs.github_repo_name }}" \
            '. += [
                {
                  "path": ($image_filepath + "/" + "current-run-image-" + $stack_name + "/run" + ".oci"),
                  "name": ($repo + "-" + $tag + "-" + $run_image + ".oci"),
                  "content_type": "application/gzip"
                }
              ]' <<<"${assets}")"

          if [[ $create_build_image == true ]]; then
            build_image=$(echo "$stack" | jq -r '.build_image')
            assets="$(jq --compact-output \
              --arg image_filepath "image-files" \
              --arg stack_name "${stack_name}" \
              --arg build_image "${build_image}" \
              --arg tag "${{ steps.tag.outputs.tag }}" \
              --arg repo "${{ needs.preparation.outputs.github_repo_name }}" \
              '. += [
                  {
                    "path": ($image_filepath + "/" + "current-build-image-" + $stack_name + "/build" + ".oci"),
                    "name": ($repo + "-" + $tag + "-" + $build_image + ".oci"),
                    "content_type": "application/gzip"
                  }
                ]' <<<"${assets}")"
          fi

          release_notes_content_per_arch=""
          for arch in $archs; do
            arch_prefix="-${arch}-"
            if [[ $arch == "amd64" ]]; then
              arch_prefix="-"
            fi

            if [ "${{ needs.preparation.outputs.polling_type }}" = "hash" ]; then
              ## Add the Hash code files of the run images to the assets
              run_image=$(echo "$stack" | jq -r '.run_image')
              assets="$(jq --compact-output \
                --arg hash_code_filepath "hash-code-files" \
                --arg stack_name "${stack_name}" \
                --arg run_image "${run_image}" \
                --arg tag "${{ steps.tag.outputs.tag }}" \
                --arg repo "${{ needs.preparation.outputs.github_repo_name }}" \
                --arg arch "${arch}" \
                --arg arch_prefix "${arch_prefix}" \
                '. += [
                  {
                    "path": ($hash_code_filepath + "/" + "hash-code-current-run-image-"+ $arch + "-" + $stack_name ),
                    "name": ($repo + "-" + $tag + $arch_prefix + $run_image + ".oci.sha256"),
                    "content_type": "text/plain"
                  }
                ]' <<<"${assets}")"

              ## Add the Hash code files of the build images to the assets
              if [[ $create_build_image == true ]]; then
                build_image=$(echo "$stack" | jq -r '.build_image')
                assets="$(jq --compact-output \
                  --arg hash_code_filepath "hash-code-files" \
                  --arg stack_name "${stack_name}" \
                  --arg build_image "${build_image}" \
                  --arg tag "${{ steps.tag.outputs.tag }}" \
                  --arg repo "${{ needs.preparation.outputs.github_repo_name }}" \
                  --arg arch "${arch}" \
                  --arg arch_prefix "${arch_prefix}" \
                  '. += [
                    {
                      "path": ($hash_code_filepath + "/" + "hash-code-current-build-image-"+ $arch + "-" + $stack_name ),
                      "name": ($repo + "-" + $tag + $arch_prefix + $build_image + ".oci.sha256"),
                      "content_type": "text/plain"
                    }
                  ]' <<<"${assets}")"
              fi
            fi
            ## TODO add the usns

            ## Add the SBOM files of the run images to the assets
            assets="$(jq --compact-output \
              --arg receipts_filepath "receipt-files" \
              --arg stack_name "${stack_name}" \
              --arg run_receipt_filename "${run_receipt_filename}" \
              --arg tag "${{ steps.tag.outputs.tag }}" \
              --arg repo "${{ needs.preparation.outputs.github_repo_name }}" \
              --arg arch_prefix "${arch_prefix}" \
              '. += [
                {
                  "path": ($receipts_filepath + "/" + "current-run-receipt"+ $arch_prefix + $stack_name ),
                  "name": ($repo + "-" + $tag + $arch_prefix + $run_receipt_filename),
                  "content_type": "text/plain"
                }
              ]' <<<"${assets}")"

            ## Adding the SBOM files of the build images to the assets
            if [[ $create_build_image == true ]]; then
              build_receipt_filename=$(echo "$stack" | jq -r '.build_receipt_filename')
              assets="$(jq --compact-output \
                --arg receipts_filepath "receipt-files" \
                --arg stack_name "${stack_name}" \
                --arg build_receipt_filename "${build_receipt_filename}" \
                --arg tag "${{ steps.tag.outputs.tag }}" \
                --arg repo "${{ needs.preparation.outputs.github_repo_name }}" \
                --arg arch_prefix "${arch_prefix}" \
                '. += [
                  {
                    "path": ($receipts_filepath + "/" + "current-build-receipt"+ $arch_prefix + $stack_name ),
                    "name": ($repo + "-" + $tag + $arch_prefix + $build_receipt_filename),
                    "content_type": "text/plain"
                  }
                ]' <<<"${assets}")"
            fi
          done
        done


        for stack in $stacks; do
          stack_name_prefix="${stack}"
          if [[ $stack_name == "default" ]]; then
            stack_name_prefix=""
          fi

          for arch in $archs; do
            arch_prefix="${arch}"
            if [[ $arch == "amd64" ]]; then
              arch_prefix=""
            fi

            usn_asset_name=$(
              echo '[
                "${{ needs.preparation.outputs.github_repo_name }}",
                "${{ steps.tag.outputs.tag }}",
                "'"$stack_name_prefix"'",
                "'"$arch_prefix"'",
                "${{ env.PATCHED_USNS_FILENAME }}"
              ]' | jq -r 'map(select(length > 0)) | join("-")'
            )
            
            assets="$(jq --compact-output \
              --arg usns_filepath "usn-files" \
              --arg stack_name "${stack_name}" \
              --arg arch "${arch}" \
              --arg usn_asset_name "${usn_asset_name}"
              '. += [
              {
                "path": ($usns_filepath + "/" + $arch + "-" + $stack_name + "-" + $patched_usns_suffix),
                "name": $usn_asset_name,
                "content_type": "text/plain"
              }
            ]' <<< "${assets}")"
          done
        done

        # Merge relase notes per architecture and add them to the assets
        release_notes_dir="release-notes"
        for arch in $archs; do
          arch_prefix="-${arch}-"
          if [[ $arch == "amd64" ]]; then
            arch_prefix="-"
          fi

          # Merge the release notes per architecture
          for stack in $stacks; do
            stack_name=$(echo "$stack" | jq -r '.name')
            filename="${arch}-${stack_name}-release-notes.md"
            cat "${release_notes_dir}/${filename}" >>"${release_notes_dir}/${arch}-release-notes"
          done

          # add release notes of the arch on the assets
          assets="$(jq --compact-output \
            --arg release_notes_dir "${release_notes_dir}" \
            --arg tag "${{ steps.tag.outputs.tag }}" \
            --arg repo "${{ needs.preparation.outputs.github_repo_name }}" \
            --arg arch "${arch}" \
            --arg arch_prefix "${arch_prefix}" \
            '. += [
              {
                "path": ($release_notes_dir + "/" + $arch + "-" + "release-notes"),
                "name": ($repo + "-" + $tag + $arch_prefix + "release-notes.md"),
                "content_type": "text/plain"
              }
            ]' <<<"${assets}")"
        done

        # If there is only one architecture
        # add this as a relase notes description
        archs_length=$(echo '${{ needs.preparation.outputs.architectures }}' | jq 'length')
        if [ $archs_length -eq 1 ]; then
          arch=$(echo '${{ needs.preparation.outputs.architectures }}' | jq -r '.[0]')
          cat "${release_notes_dir}/${arch}-release-notes" > release_notes.md
        fi

        echo "assets=${assets}" >> "$GITHUB_OUTPUT"
        echo "archs_length=${archs_length}" >> "$GITHUB_OUTPUT"

    - name: Generate Release Notes Description
      if: ${{ steps.assets.outputs.archs_length > 1 }}
      run: |
        echo "## Images" > release_notes.md
        echo "" >> release_notes.md
        stacks=$(echo '${{ needs.preparation.outputs.stacks }}' | jq -c -r '.[]')
        for stack in $stacks; do
          stack_name=$(echo "$stack" | jq -r '.name')
          run_image=$(echo "$stack" | jq -r '.run_image')
          build_image=$(echo "$stack" | jq -r '.build_image')
          create_build_image=$(echo "$stack" | jq -r '.create_build_image // false')

          if [ ${create_build_image} == true ]; then
            echo "Build: \`${{ needs.preparation.outputs.repo_owner }}/${build_image}-${stack_name}:${{ steps.tag.outputs.tag }}\`" >> release_notes.md
          fi
          echo "Run: \`${{ needs.preparation.outputs.repo_owner }}/${run_image}-${stack_name}:${{ steps.tag.outputs.tag }}\`" >> release_notes.md
        done

    - name: Create Release
      uses: paketo-buildpacks/github-config/actions/release/create@main
      with:
        repo: ${{ github.repository }}
        token: ${{ secrets.PAKETO_BOT_GITHUB_TOKEN }}
        tag_name: v${{ steps.tag.outputs.tag }}
        target_commitish: ${{ github.sha }}
        name: v${{ steps.tag.outputs.tag }}
        body_filepath: release_notes.md
        draft: false
        assets: ${{ steps.assets.outputs.assets }}

  failure:
    name: Alert on Failure
    runs-on: ubuntu-22.04
    needs: [ preparation, poll_usns, poll_images, create_stack, stack_files_changed, diff, test, packages_changed, release ]
    if: ${{ always() && needs.preparation.result == 'failure' || needs.poll_images.result == 'failure' || needs.poll_usns.result == 'failure' || needs.create_stack.result == 'failure' || needs.diff.result == 'failure' || needs.test.result == 'failure' || needs.release.result == 'failure' || needs.packages_changed.result == 'failure' || needs.stack_files_changed.result == 'failure' }}
    steps:
    - name: File Failure Alert Issue
      uses: paketo-buildpacks/github-config/actions/issue/file@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repo: ${{ github.repository }}
        label: "failure:release"
        comment_if_exists: true
        issue_title: "Failure: Create Release workflow"
        issue_body: |
          Create Release workflow [failed](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}).
          Unable to update images.
        comment_body: |
          Another failure occurred: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}